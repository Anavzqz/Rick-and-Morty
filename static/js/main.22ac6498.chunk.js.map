{"version":3,"sources":["components/Details.js","components/Characters.js","components/CharacterList.js","components/Title.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Details","props","statusLife","console","log","status","react_default","a","createElement","Container","Row","Col","lg","xs","Card","CardImg","style","filter","top","width","src","image","alt","CardBody","CardTitle","name","CardSubtitle","CardText","species","type","gender","origin","Characters","md","body","outline","color","id","Link","to","Button","CharacterList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","_this2","axios","get","then","res","characterData","data","results","setState","catch","map","i","react","components_Characters","key","components_Details","tipo","Component","Title","Routes","Switch","Route","exact","path","component","CharactersList","App","className","src_Routes","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.22ac6498.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardImg, CardText, CardBody,\r\n    CardTitle, CardSubtitle, Container, Row, Col } from 'reactstrap';\r\n\r\n\r\nconst Details = (props) => {\r\n    console.log(props);\r\n    let statusLife;\r\n        props.status !== \"Alive\" ? statusLife = \"1\": statusLife = \"0\"\r\n\r\nreturn(\r\n    <Container>  \r\n             <Row> \r\n                 <Col lg = {12} xs = {12}>\r\n                    <Card>\r\n                        <CardImg style={{filter: \"grayscale(\"+statusLife+\")\"}} top width=\"100%\" src={props.image} alt=\"Card image cap\" />\r\n                        <CardBody >\r\n                            <CardTitle>Name: {props.name}</CardTitle>\r\n                             <CardSubtitle>Status: {props.status}</CardSubtitle>\r\n                              <CardText>Spiece: {props.species}</CardText>\r\n                              <CardText>Type: {props.type}</CardText>\r\n                              <CardText>Gender: {props.gender}</CardText>\r\n                              <CardText>Origin: {props.origin.name}</CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                 </Col>\r\n            </Row>\r\n        </Container>\r\n)\r\n     \r\n}\r\n export default Details;\r\n ","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, CardImg, CardText, CardBody,\r\n    CardTitle, Button, Container, Row, Col } from 'reactstrap';\r\n\r\nconst Characters = (props) => {\r\n\r\n        console.log(props);\r\n        let statusLife;\r\n        props.status !== \"Alive\" ? statusLife = \"1\": statusLife = \"0\"\r\n        return(\r\n         <Container>  \r\n             <Row> \r\n                 <Col lg={12} md={5} xs ={12}>\r\n                    <Card body outline color=\"primary\">\r\n                        <CardImg style={{filter: \"grayscale(\"+statusLife+\")\"}} top width=\"50%\" src={props.image} alt=\"Card image cap\" />\r\n                          <CardBody>\r\n                            <CardTitle>{props.name}</CardTitle>\r\n                              <CardText>ID: {props.id}</CardText>\r\n                                <Link to = { '/details/'+props.id} ><Button color=\"success\" >See more</Button></Link>\r\n                          </CardBody>\r\n                    </Card>\r\n                 </Col>\r\n            </Row>\r\n        </Container>\r\n                )    \r\n}\r\n\r\nexport default Characters;","import React, { Component, Fragment } from 'react';\r\nimport Characters from './Characters';\r\nimport axios from 'axios';\r\nimport Details from './Details';\r\n\r\n\r\nclass CharacterList extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n        items: [],\r\n    }\r\n}\r\n\r\ncomponentDidMount(){\r\n    axios.get('https://rickandmortyapi.com/api/character/?page=1')\r\n    .then(res =>{\r\n        const characterData = res.data.results;\r\n        this.setState({\r\n           items: characterData,\r\n        })\r\n      }).catch(console.log('error'))\r\n}\r\n  render(){\r\n    const { items } = this.state;\r\n    console.log(items);\r\n    return(\r\n    <div>\r\n    { \r\n      items.map(i => {\r\n        return (\r\n          <Fragment>\r\n        <Characters \r\n        key = {i.id} \r\n        id = {i.id} \r\n        name = {i.name} \r\n        image = {i.image} \r\n        status = {i.status}/>\r\n        <Details \r\n        key = {i.id} \r\n        id = {i.id} \r\n        name={i.name} \r\n        image = {i.image} \r\n        status = {i.status}\r\n        species = {i.species}\r\n        tipo = {i.type}\r\n        gender= {i.gender}\r\n        origin= {i.origin.name}\r\n        />\r\n        </Fragment>\r\n        );\r\n      })\r\n    } \r\n    </div>\r\n     );\r\n  }\r\n}\r\n\r\n export default CharacterList;\r\n","import React from 'react';\r\n//import { Container, Row, Input, Spinner  } from 'reactstrap';\r\n\r\nconst Title = () => {\r\n    return(\r\n        <h1>\r\n            Rick y Morty App\r\n        </h1>\r\n    )\r\n}\r\n\r\n\r\n\r\n/*class Title extends Component {\r\n\r\n    render(){\r\n        makeSearch = string =>{\r\n        if (string === \"\"){\r\n            <Characters />\r\n        } else {\r\n            let regex = new RegExp(string, 'i')\r\n            let filtered = items.filter(r => regex.test(r.name));\r\n        }\r\n        return(\r\n            <form>\r\n                <div className=\"row\">                    \r\n                    <div className=\"form-group col-md-8\">\r\n                    <FormGroup>\r\n          <Label for=\"exampleSearch\">Search</Label>\r\n          <Input\r\n            type=\"search\"\r\n            name=\"search\"\r\n            id=\"exampleSearch\"\r\n            placeholder=\"search placeholder\"\r\n          />\r\n        </FormGroup>\r\n                        <input className=\"form-control form-control-lg\" type=\"search\" placeholder=\"Search a character\" \r\n                        onChange ={e => { makeSearch(e.target.value) } }\r\n                        onClick ={e => { makeSearch(e.target.value) } }\r\n                        onKeyPress={e => {\r\n                                   if (e.key !== \"Enter\") return\r\n                                   makeSearch(e.target.value)\r\n                               }}/>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n}*/\r\nexport default Title;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n//import Characters from './components/Characters';\r\nimport Details from './components/Details';\r\nimport CharactersList from './components/CharacterList';\r\nimport Title from './components/Title';\r\n\r\nconst Routes = () => {\r\n    return(\r\n        <Switch>\r\n            <Route exact path = '/' component = { CharactersList } />\r\n            <Route path = '/details' component = { Details } />\r\n            <Route path = '/title' component = { Title } />\r\n        </Switch>\r\n    )\r\n}\r\nexport default Routes;","import React, { Component } from 'react';\nimport './App.css';\nimport Routes from './Routes';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Routes />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\n\n//Browser router\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}